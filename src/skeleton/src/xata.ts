// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Profiles",
    columns: [
      { name: "name", type: "string" },
      { name: "bio", type: "text" },
      { name: "avatar", type: "file", file: { defaultPublicAccess: true } },
      { name: "meta", type: "json" },
      { name: "username", type: "string", unique: true },
    ],
    revLinks: [
      { column: "profile", table: "Posts" },
      { column: "profile", table: "Likes" },
      { column: "profile", table: "Albums" },
      { column: "profile", table: "Comments" },
    ],
  },
  {
    name: "Posts",
    columns: [
      { name: "profile", type: "link", link: { table: "Profiles" } },
      { name: "content", type: "text" },
      { name: "image", type: "file", file: { defaultPublicAccess: true } },
      { name: "album", type: "link", link: { table: "Albums" } },
      { name: "qualityScore", type: "int" },
    ],
    revLinks: [
      { column: "post", table: "Comments" },
      { column: "post", table: "Likes" },
    ],
  },
  {
    name: "Images",
    columns: [
      { name: "image", type: "file", file: { defaultPublicAccess: true } },
      { name: "content", type: "text" },
    ],
    revLinks: [
      { column: "image", table: "Comments" },
      { column: "image", table: "Likes" },
    ],
  },
  {
    name: "Albums",
    columns: [
      { name: "title", type: "string" },
      { name: "description", type: "text" },
      {
        name: "images",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
      { name: "profile", type: "link", link: { table: "Profiles" } },
    ],
    revLinks: [
      { column: "album", table: "Posts" },
      { column: "album", table: "Comments" },
      { column: "album", table: "Likes" },
    ],
  },
  {
    name: "Comments",
    columns: [
      { name: "content", type: "text" },
      { name: "post", type: "link", link: { table: "Posts" } },
      { name: "image", type: "link", link: { table: "Images" } },
      { name: "album", type: "link", link: { table: "Albums" } },
      { name: "profile", type: "link", link: { table: "Profiles" } },
    ],
    revLinks: [{ column: "comment", table: "Likes" }],
  },
  {
    name: "Likes",
    columns: [
      { name: "comment", type: "link", link: { table: "Comments" } },
      { name: "profile", type: "link", link: { table: "Profiles" } },
      { name: "image", type: "link", link: { table: "Images" } },
      { name: "post", type: "link", link: { table: "Posts" } },
      { name: "album", type: "link", link: { table: "Albums" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Profiles = InferredTypes["Profiles"];
export type ProfilesRecord = Profiles & XataRecord;

export type Posts = InferredTypes["Posts"];
export type PostsRecord = Posts & XataRecord;

export type Images = InferredTypes["Images"];
export type ImagesRecord = Images & XataRecord;

export type Albums = InferredTypes["Albums"];
export type AlbumsRecord = Albums & XataRecord;

export type Comments = InferredTypes["Comments"];
export type CommentsRecord = Comments & XataRecord;

export type Likes = InferredTypes["Likes"];
export type LikesRecord = Likes & XataRecord;

export type DatabaseSchema = {
  Profiles: ProfilesRecord;
  Posts: PostsRecord;
  Images: ImagesRecord;
  Albums: AlbumsRecord;
  Comments: CommentsRecord;
  Likes: LikesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  branch: "main",
  databaseURL:
    "https://KenanKStipek-s-workspace-9r706e.us-west-2.xata.sh/db/netgirls-online",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
